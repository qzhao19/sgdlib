#include <iostream>
#include <vector>
#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include "sgdlib/algorithm/cd/scd.hpp"


class SCDTest : public ::testing::Test {
public:
    void SetUp() override {
        X_train = {
            -0.5557,-0.6665,-0.7780,-0.8335,-0.6113,-0.3890,-0.8335,-0.6113,-0.9443,-0.6665,-0.3890,-0.7220,-0.7220,
            -1.0000,-0.1666,-0.2222,-0.3890,-0.5557,-0.2222,-0.5557,-0.3890,-0.5557,-0.8335,-0.5557,-0.7220,-0.6113,
            -0.6113,-0.5000,-0.5000,-0.7780,-0.7220,-0.3890,-0.5000,-0.3333,-0.6665,-0.6113,-0.3333,-0.6665,-0.9443,
            -0.5557,-0.6113,-0.8887,-0.9443,-0.6113,-0.5557,-0.7220,-0.5557,-0.8335,-0.4443,-0.6113,0.5000,0.1666,
            0.4443,-0.3333,0.2222,-0.2222,0.1111,-0.6665,0.2778,-0.5000,-0.6113,-0.1111,-0.0555,-0.0000,-0.2778,
            0.3333,-0.2778,-0.1666,0.0555,-0.2778,-0.1111,-0.0000,0.1111,-0.0000,0.1666,0.2778,0.3890,0.3333,-0.0555,
            -0.2222,-0.3333,-0.3333,-0.1666,-0.0555,-0.3890,-0.0555,0.3333,0.1111,-0.2778,-0.3333,-0.3333,-0.0000,
            -0.1666,-0.6113,-0.2778,-0.2222,-0.2222,0.0555,-0.5557,-0.2222,0.1111,-0.1666,0.5557,0.1111,0.2222,0.8335,
            -0.6665,0.6665,0.3333,0.6113,0.2222,0.1666,0.3890,-0.2222,-0.1666,0.1666,0.2222,0.8887,0.8887,-0.0555,0.4443,
            -0.2778,0.8887,0.1111,0.3333,0.6113,0.0555,-0.0000,0.1666,0.6113,0.7220,1.0000,0.1666,0.1111,-0.0000,0.8887,
            0.1111,0.1666,-0.0555,0.4443,0.3333,0.4443,-0.1666,0.3890,0.3333,0.3333,0.1111,0.2222,0.0555,-0.1111,

            0.2500,-0.1666,0.0000,-0.0833,0.3333,0.5835,0.1666,0.1666,-0.2500,-0.0833,0.4167,0.1666,-0.1666,-0.1666,
            0.6665,1.0000,0.5835,0.2500,0.5000,0.5000,0.1666,0.4167,0.3333,0.0833,0.1666,-0.1666,0.1666,0.2500,0.1666,
            0.0000,-0.0833,0.1666,0.7500,0.8335,-0.0833,0.0000,0.2500,0.3333,-0.1666,0.1666,0.2500,-0.7500,0.0000,0.2500,
            0.5000,-0.1666,0.5000,0.0000,0.4167,0.0833,0.0000,0.0000,-0.0833,-0.7500,-0.3333,-0.3333,0.0833,-0.6665,-0.2500,
            -0.4167,-1.0000,-0.1666,-0.8335,-0.2500,-0.2500,-0.0833,-0.1666,-0.4167,-0.8335,-0.5835,0.0000,-0.3333,-0.5835,
            -0.3333,-0.2500,-0.1666,-0.3333,-0.1666,-0.2500,-0.5000,-0.6665,-0.6665,-0.4167,-0.4167,-0.1666,0.1666,-0.0833,
            -0.7500,-0.1666,-0.5835,-0.5000,-0.1666,-0.5000,-0.7500,-0.4167,-0.1666,-0.2500,-0.2500,-0.5835,-0.3333,0.0833,
            -0.4167,-0.1666,-0.2500,-0.1666,-0.1666,-0.5835,-0.2500,-0.5835,0.3333,0.0000,-0.4167,-0.1666,-0.5835,-0.3333,
            0.0000,-0.1666,0.5000,-0.5000,-0.8335,0.0000,-0.3333,-0.3333,-0.4167,0.0833,0.0000,-0.3333,-0.1666,-0.3333,
            -0.1666,-0.3333,0.5000,-0.3333,-0.3333,-0.5000,-0.1666,0.1666,-0.0833,-0.1666,-0.0833,-0.0833,-0.0833,-0.4167,
            0.0000,0.0833,-0.1666,-0.5835,-0.1666,0.1666,-0.1666,

            -0.8643,-0.8643,-0.8984,-0.8306,-0.8643,-0.7627,-0.8643,-0.8306,-0.8643,-0.8306,-0.8306,-0.7964,-0.8643,-0.9663,
            -0.9320,-0.8306,-0.8984,-0.8643,-0.7627,-0.8306,-0.7627,-0.8306,-1.0000,-0.7627,-0.6950,-0.7964,-0.7964,-0.8306,
            -0.8643,-0.7964,-0.7964,-0.8306,-0.8306,-0.8643,-0.8306,-0.9320,-0.8984,-0.8643,-0.8984,-0.8306,-0.8984,-0.8984,
            -0.8984,-0.7964,-0.6950,-0.8643,-0.7964,-0.8643,-0.8306,-0.8643,0.2542,0.1864,0.3220,0.0169,0.2203,0.1864,0.2542,
            -0.2203,0.2203,-0.0169,-0.1526,0.0847,0.0169,0.2542,-0.1187,0.1526,0.1864,0.0508,0.1864,-0.0169,0.2880,0.0169,
            0.3220,0.2542,0.1187,0.1526,0.2880,0.3560,0.1864,-0.1526,-0.0508,-0.0847,-0.0169,0.3900,0.1864,0.1864,0.2542,
            0.1526,0.0508,0.0169,0.1526,0.2203,0.0169,-0.2203,0.0847,0.0847,0.0847,0.1187,-0.3220,0.0508,0.6950,0.3900,
            0.6610,0.5590,0.6270,0.8984,0.1864,0.7964,0.6270,0.7290,0.3900,0.4575,0.5254,0.3560,0.3900,0.4575,0.5254,
            0.9320,1.0000,0.3560,0.5933,0.3220,0.9320,0.3220,0.5933,0.6950,0.2880,0.3220,0.5590,0.6270,0.7290,0.8306,
            0.5590,0.3900,0.5590,0.7290,0.5590,0.5254,0.2880,0.4915,0.5590,0.3900,0.3900,0.6610,0.5933,0.4238,0.3560,
            0.4238,0.4915,0.3900,

            -0.9165,-0.9165,-0.9165,-0.9165,-0.9165,-0.7500,-0.8335,-0.9165,-0.9165,-1.0000,-0.9165,-0.9165,-1.0000,-1.0000,
            -0.9165,-0.7500,-0.7500,-0.8335,-0.8335,-0.8335,-0.9165,-0.7500,-0.9165,-0.6665,-0.9165,-0.9165,-0.7500,-0.9165,
            -0.9165,-0.9165,-0.9165,-0.7500,-1.0000,-0.9165,-0.9165,-0.9165,-0.9165,-1.0000,-0.9165,-0.9165,-0.8335,-0.8335,
            -0.9165,-0.5835,-0.7500,-0.8335,-0.9165,-0.9165,-0.9165,-0.9165,0.0833,0.1666,0.1666,0.0000,0.1666,0.0000,0.2500,
            -0.2500,0.0000,0.0833,-0.2500,0.1666,-0.2500,0.0833,0.0000,0.0833,0.1666,-0.2500,0.1666,-0.1666,0.4167,0.0000,
            0.1666,-0.0833,0.0000,0.0833,0.0833,0.3333,0.1666,-0.2500,-0.1666,-0.2500,-0.0833,0.2500,0.1666,0.2500,0.1666,
            0.0000,0.0000,0.0000,-0.0833,0.0833,-0.0833,-0.2500,0.0000,-0.0833,0.0000,0.0000,-0.1666,0.0000,1.0000,0.5000,
            0.6665,0.4167,0.7500,0.6665,0.3333,0.4167,0.4167,1.0000,0.5835,0.5000,0.6665,0.5835,0.9165,0.8335,0.4167,0.7500,
            0.8335,0.1666,0.8335,0.5835,0.5835,0.4167,0.6665,0.4167,0.4167,0.4167,0.6665,0.2500,0.5000,0.5835,0.7500,0.1666,
            0.0833,0.8335,0.9165,0.4167,0.4167,0.6665,0.9165,0.8335,0.5000,0.8335,1.0000,0.8335,0.5000,0.5835,0.8335,0.4167,
        };
        y_train = {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

        w0 = {1.0, 1.0, 1.0, 1.0};
        std::string loss = "LogLoss";
        double alpha = 0.01;
        double tol = 0.0001;
        std::size_t max_iters = 500;
        std::size_t random_seed = 1;
        bool shuffle = true;
        bool verbose = false;
        dataset = std::make_unique<sgdlib::ArrayDatasetType>(
            X_train, y_train, 150, 4, false
        );
        optimizer = std::make_unique<sgdlib::SCD>(w0,
            loss,
            alpha,
            tol,
            max_iters,
            random_seed,
            shuffle,
            verbose
        );
    }
    std::vector<double> X_train;
    std::vector<int> y_train;
    std::vector<double> w0;
    std::unique_ptr<sgdlib::Optimizer> optimizer;
    std::unique_ptr<sgdlib::ArrayDatasetType> dataset;
};

TEST_F(SCDTest, BasicOptimizationTest) {
    optimizer->optimize(*dataset);
    const auto& w_opt = optimizer->get_weights();

    // check weight update
    EXPECT_EQ(w_opt.size(), 4);
    EXPECT_FALSE(w_opt[0] == w0[0]) << "Weights not updated";
    EXPECT_FALSE(w_opt[1] == w0[1]) << "Weights not updated";

    // print coefficients
    std::cout << "coefficients = ";
    for (auto w : w_opt) {
        std::cout << w << " ";
    }
    std::cout << std::endl;
}

TEST_F(SCDTest, ConvergenceTest) {
    EXPECT_NO_THROW(optimizer->optimize(*dataset));
    EXPECT_TRUE(optimizer->get_weights().size() > 0);
}

TEST_F(SCDTest, ConvergenceSpeedTest) {
    std::vector<double> all_losses;
    all_losses.reserve(1000);
    optimizer->set_callback([&all_losses](const std::vector<double>& loss_history) {
        all_losses.insert(all_losses.end(), loss_history.begin(), loss_history.end());
    });
    optimizer->optimize(*dataset);
    all_losses.shrink_to_fit();

    const double initial_loss = all_losses[0];
    const double final_loss = all_losses.back();
    const double improvement_ratio = (initial_loss - final_loss) / initial_loss;

    EXPECT_GT(improvement_ratio, 0.3f) << "insufficient convergence rate";

    // std::cout << "loss size = " << all_losses.size() << std::endl;
};
